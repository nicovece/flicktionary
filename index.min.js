const express=require("express"),morgan=require("morgan"),fs=require("fs"),path=require("path"),bodyParser=require("body-parser"),uuid=require("uuid"),mongoose=require("mongoose"),{check:check,validationResult:validationResult}=require("express-validator"),app=express(),Models=require("./models.js"),Movies=Models.Movie,Users=Models.User;mongoose.connect(process.env.CONNECTION_URI);const accessLogStream=fs.createWriteStream(path.join(__dirname,"log.txt"),{flags:"a"});app.use(morgan("combined",{stream:accessLogStream})),app.use(express.static("public")),app.use(bodyParser.json()),app.use(express.urlencoded({extended:!0}));const cors=require("cors");app.use(cors());let auth=require("./auth")(app);const passport=require("passport");require("./passport"),app.use(((err,req,res,next)=>{console.error(err.stack),res.status(500).send("We have a problem, something gone wrong!")})),app.get("/",((req,res)=>{res.sendFile("public/index.html",{root:__dirname})})),app.get("/movies",passport.authenticate("jwt",{session:!1}),(async(req,res)=>{await Movies.find().then((movies=>{res.status(200).json(movies)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/movies/:Title",passport.authenticate("jwt",{session:!1}),(async(req,res)=>{await Movies.findOne({Title:req.params.Title}).then((movie=>{res.json(movie)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/movies/genre/:genreName",passport.authenticate("jwt",{session:!1}),(async(req,res)=>{await Movies.findOne({"Genre.Name":req.params.genreName}).then((movie=>{res.json(movie.Genre)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/movies/director/:directorName",passport.authenticate("jwt",{session:!1}),(async(req,res)=>{await Movies.findOne({"Director.Name":req.params.directorName}).then((movie=>{res.json(movie.Director)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/users",passport.authenticate("jwt",{session:!1}),(async(req,res)=>{await Users.find().then((users=>{res.status(201).json(users)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.get("/users/:Username",passport.authenticate("jwt",{session:!1}),(async(req,res)=>{await Users.findOne({Username:req.params.Username}).then((user=>{res.json(user)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.post("/users",[check("Username","Username is required and must be at least 5 characters long.").isLength({min:5}),check("Username","Username contains non alphanumeric characters - not allowed.").isAlphanumeric(),check("Password","Password is required").not().isEmpty(),check("Email","Email does not appear to be valid").isEmail()],(async(req,res)=>{let errors=validationResult(req);if(!errors.isEmpty())return res.status(422).json({errors:errors.array()});let hashedPassword=Users.hashPassword(req.body.Password);await Users.findOne({Username:req.body.Username}).then((user=>{if(user)return res.status(400).send(req.body.Username+" already exists");Users.create({Username:req.body.Username,Password:hashedPassword,Email:req.body.Email,Birthday:req.body.Birthday}).then((user=>{res.status(201).json(user)})).catch((error=>{console.error(error),res.status(500).send("Error: "+error)}))})).catch((error=>{console.error(error),res.status(500).send("Error: "+error)}))})),app.put("/users/:Username",passport.authenticate("jwt",{session:!1}),[check("Username","Username is required").isLength({min:5}),check("Username","Username contains non alphanumeric characters").isAlphanumeric(),check("Password","Password is required").not().isEmpty(),check("Email","Email does not have a valid format").isEmail()],(async(req,res)=>{if(req.user.Username!==req.params.Username)return res.status(400).send("Permission denied");let errors=validationResult(req);if(!errors.isEmpty())return res.status(422).json({errors:errors.array()});await Users.findOneAndUpdate({Username:req.params.Username},{$set:{Username:req.body.Username,Password:req.body.Password,Email:req.body.Email,Birthday:req.body.Birthday}},{new:!0}).then((updatedUser=>{res.json(updatedUser)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.post("/users/:Username/movies/:MovieID",passport.authenticate("jwt",{session:!1}),(async(req,res)=>{if(req.user.Username!==req.params.Username)return res.status(400).send("Permission denied");await Users.findOneAndUpdate({Username:req.params.Username},{$push:{FavoriteMovies:req.params.MovieID}},{new:!0}).then((updatedUser=>{res.json(updatedUser)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.delete("/users/:Username/movies/:MovieID",passport.authenticate("jwt",{session:!1}),(async(req,res)=>{if(req.user.Username!==req.params.Username)return res.status(400).send("Permission denied");await Users.findOneAndUpdate({Username:req.params.Username},{$pull:{FavoriteMovies:req.params.MovieID}},{new:!0}).then((updatedUser=>{res.json(updatedUser)})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))})),app.delete("/users/:Username",passport.authenticate("jwt",{session:!1}),(async(req,res)=>{if(req.user.Username!==req.params.Username)return res.status(400).send("Permission denied");await Users.findOneAndDelete({Username:req.params.Username}).then((user=>{user?res.status(200).send('User with username "'+req.params.Username+' " successfully removed.'):res.status(400).send(req.params.Username+" was not found")})).catch((err=>{console.error(err),res.status(500).send("Error: "+err)}))}));const port=process.env.PORT||8080;app.listen(port,"0.0.0.0",(()=>{console.log("Listening on port "+port)}));